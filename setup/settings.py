"""
Django settings for setup project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
# Opcional para produção (Railway/Postgres). Mantém sqlite se não houver DATABASE_URL:
try:
    import dj_database_url  # adicionado
except Exception:
    dj_database_url = None

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ook(6a9)$a2)23p9r#p-is2#gg0m#a_j-p!*es608w93uqr_xh'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Adapter do allauth (mantido)
ACCOUNT_ADAPTER = "setup.account_adapter.MyAccountAdapter"

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    "corsheaders",

    # Necessário para o allauth
    "django.contrib.sites",

    # Allauth
    "allauth",
    "allauth.account",
]

SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",              # auth padrão
    "allauth.account.auth_backends.AuthenticationBackend",    # allauth
]

LOGIN_REDIRECT_URL = "/"      # pós-login
LOGOUT_REDIRECT_URL = "/"     # pós-logout

# Configurações comuns do allauth (mantidas, mesmo com warnings deprecados)
ACCOUNT_AUTHENTICATION_METHOD = "username_email"  # ou "email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "optional"  # "mandatory" para exigir verificação
ACCOUNT_USERNAME_REQUIRED = True

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"



MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",         # serve estáticos em prod
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",       # <— ANTES
    "setup.middleware.LoginRequiredMiddleware",           # <— DEPOIS
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080",
    "http://127.0.0.1:8080",
]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8080",
    "http://127.0.0.1:8080",
    "https://sleepypeepy-production.up.railway.app",
]

# URLs liberadas de login (regex, relativas à raiz, sem a "/")
LOGIN_EXEMPT_URLS = [
    # públicas do seu site
    r"^lp/$", r"^lp/.*$",
    r"^whatsapp/$",
    r"^politica-de-privacidade/$",
    r"^termos/$",
    r"^quiz-insonia/?$",
    r"^quiz-ansiedade/?$",
    r"^quiz-misto/?$",
    
    # allauth/admin/estáticos
    r"^accounts/.*$",
    r"^admin/.*$",
    r"^static/.*$",
    r"^media/.*$",
    r"^favicon\.ico$",
    r"^robots\.txt$",
    r"^sitemap\.xml$",
    r"^\.well-known/.*$",

    # APIs públicas (se existirem)
    r"^api/public/.*$",
    
]

# Login só por e-mail
ACCOUNT_LOGIN_METHODS = {"email"}

# Cadastro com apenas e-mail e senha (e-mail obrigatório por causa do "*")
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*"]
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False  # 1 campo de senha

# Não exigir/verificar e-mail
ACCOUNT_EMAIL_VERIFICATION = "none"  # nada de confirmação

CORS_ALLOW_CREDENTIALS = True  # Para cookies

ROOT_URLCONF = 'setup.urls'

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",  # ⇦ seus overrides (allauth etc.)
            BASE_DIR / "dist",       # ⇦ index.html do Vite (SPA)
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = 'setup.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# Mantém a sua config sqlite padrão:
#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'railway',
        'USER': 'postgres',
        'PASSWORD': 'jrPGtaPCKajpfYsMsoRVOtaWJGYpIcYK',
        'HOST': 'postgres.railway.internal',
        'PORT': '5432',
    }
}

# Em produção (Railway), se existir DATABASE_URL no ambiente e dj_database_url estiver disponível,
# sobrepõe usando Postgres automaticamente, sem remover a variável original.
if dj_database_url and os.getenv("DATABASE_URL"):
    DATABASES['default'] = dj_database_url.parse(os.getenv("DATABASE_URL"), conn_max_age=600)


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "dist",              # build do Vite (SPA)
    BASE_DIR / "public",            # se usar
    BASE_DIR / "src" / "assets",    # assets do React (se realmente precisar)
    BASE_DIR / "setup" / "static",  # ⬅️ ADICIONE ESTA LINHA
]

# Em produção, ativa storage com manifest + compressão (sem remover sua config original)
if not DEBUG:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Segurança/cookies para produção (sem remover suas variáveis existentes)
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
